/**
 * Message-related interfaces and types for the voice conversation system
 * Provides comprehensive type definitions for handling both text and voice messages
 * with secure data handling and audit trail support
 * @version 1.0.0
 */

import { UUID, Timestamp, Result } from '../types/common.types';

/**
 * Enumeration of possible message sender roles
 * Ensures type-safe role assignment and validation
 */
export enum MessageRole {
  /** Message sent by the end user */
  USER = 'user',
  /** Message generated by the AI assistant */
  AI = 'ai',
  /** System-generated message or notification */
  SYSTEM = 'system'
}

/**
 * Comprehensive metadata interface for message analytics and performance tracking
 * Captures key metrics for both voice and text messages
 */
export interface MessageMetadata {
  /** Duration of the message in milliseconds (voice) or estimated reading time (text) */
  duration: number;
  /** Number of words in the message content */
  wordCount: number;
  /** Total processing time in milliseconds from receipt to completion */
  processingTime: number;
  /** Audio format for voice messages (null for text-only messages) */
  audioFormat: string | null;
  /** Speech recognition confidence score (null for text-only messages) */
  transcriptionConfidence: number | null;
}

/**
 * Core message interface representing a single message in a conversation
 * Includes comprehensive tracking and security-focused design
 */
export interface Message {
  /** Unique identifier for the message */
  readonly id: UUID;
  /** Reference to the parent conversation */
  readonly conversationId: UUID;
  /** Role of the message sender */
  readonly role: MessageRole;
  /** Message content (text) */
  readonly content: string;
  /** Optional reference to associated audio recording */
  readonly audioRecordingId: UUID | null;
  /** Comprehensive message metadata */
  readonly metadata: MessageMetadata;
  /** Message creation timestamp */
  readonly createdAt: Timestamp;
}

/**
 * Parameters interface for creating new messages
 * Ensures type safety and validation during message creation
 */
export interface MessageCreateParams {
  /** Parent conversation identifier */
  conversationId: UUID;
  /** Role of the message sender */
  role: MessageRole;
  /** Message content (text) */
  content: string;
  /** Optional reference to associated audio recording */
  audioRecordingId: UUID | null;
  /** Optional metadata (partial allowed during creation) */
  metadata: Partial<MessageMetadata>;
}

/**
 * Comprehensive service interface for message management operations
 * Provides type-safe methods for CRUD operations on messages
 */
export interface IMessageService {
  /**
   * Creates a new message in the system
   * @param params Message creation parameters
   * @returns Promise resolving to the created message
   */
  createMessage(params: MessageCreateParams): Promise<Result<Message>>;

  /**
   * Retrieves a specific message by ID
   * @param id Message identifier
   * @returns Promise resolving to the requested message
   */
  getMessage(id: UUID): Promise<Result<Message>>;

  /**
   * Retrieves messages for a specific conversation with pagination
   * @param conversationId Conversation identifier
   * @param options Optional pagination parameters
   * @returns Promise resolving to an array of messages
   */
  getMessagesByConversation(
    conversationId: UUID,
    options?: { limit?: number; offset?: number }
  ): Promise<Result<Message[]>>;

  /**
   * Updates an existing message
   * @param id Message identifier
   * @param updates Partial message updates
   * @returns Promise resolving to the updated message
   */
  updateMessage(id: UUID, updates: Partial<Message>): Promise<Result<Message>>;

  /**
   * Deletes a message from the system
   * @param id Message identifier
   * @returns Promise resolving to void on successful deletion
   */
  deleteMessage(id: UUID): Promise<Result<void>>;
}